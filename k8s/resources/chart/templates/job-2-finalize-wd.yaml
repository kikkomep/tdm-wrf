{{ if not .Values.global.running.skip.finalize }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-wrf-init-job-2-finalize-wd"
  labels:
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{.Release.Name}}-wrf-init-job-2-finalize-wd"
      labels:
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      volumes:
        - name: config-data
          configMap:
            name: {{ .Release.Name }}-config-data
        - name: init-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-init-data-claim
        - name: run-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-run-data-claim
      initContainers:
        # - name: wait-for-wrf-data-init-1
        #   image: "groundnuty/k8s-wait-for:latest"
        #   imagePullPolicy: "Always"
        #   args: [
        #     "job", "{{.Release.Name}}-wrf-init-job-1a-prepare-wd"
        #   ]
        - name: wait-for-wrf-data-init-2
          image: "groundnuty/k8s-wait-for:latest"
          imagePullPolicy: "Always"
          args: [            
            "job", "{{.Release.Name}}-wrf-init-job-1b-geo-fetch"
          ]
        - name: wait-for-wrf-data-init-3
          image: "groundnuty/k8s-wait-for:latest"
          imagePullPolicy: "Always"
          args: [
            "job", "{{.Release.Name}}-wrf-init-job-1c-gfs-fetch"
          ]
      containers:
        # DEBUG container
        # - name: shell
        #   image: "{{ .Values.mpiDataWriterImage.repository }}:{{ .Values.mpiDataWriterImage.tag }}"
        #   imagePullPolicy: "{{ .Values.mpiDataWriterImage.pullPolicy }}"
        #   command: ["/bin/sleep","{{default "3600" .Values.sleepyTime}}"]
        #   volumeMounts:
        #     - name: config-data
        #       mountPath: {{ .Values.persistence.config_data.path }}
        #     - name: init-data
        #       mountPath: {{ .Values.persistence.init_data.path }}
        #     - name: run-data
        #       mountPath: {{ .Values.persistence.run_data.path }}
        - name: wrf-finalize
          image: "{{ .Values.wrfInitializerImage.repository }}:{{ .Values.wrfInitializerImage.tag }}"
          imagePullPolicy: "{{ .Values.wrfInitializerImage.pullPolicy }}"
          command: ["finalize.sh"]
          #command: ["/bin/sleep","{{default "5" .Values.sleepyTime}}"]
          env:
            - name: RUN_DATA
              value: {{ .Values.persistence.run_data.path }}
            - name: OUT_DATA
              value: {{ .Values.persistence.out_data.path }}
            - name: LOG_DATA
              value: {{ .Values.persistence.log_data.path }}
            - name: INIT_DATA
              value: {{ .Values.persistence.init_data.path }}
            - name: GEO_DATA
              value: {{ .Values.persistence.init_data.path }}{{ .Values.global.geometry.geog_data_path }}
            - name: GFS_DATA
              value: {{ .Values.persistence.init_data.path }}{{ .Values.global.geometry.gfs_data }}
            - name: YEAR
              value: "{{ .Values.global.timespan.start.year }}"
            - name: MONTH
              value: "{{ .Values.global.timespan.start.month }}"
            - name: DAY
              value: "{{ .Values.global.timespan.start.day }}"
            - name: HOUR
              value: "{{ .Values.global.timespan.start.hour }}"
            - name: END_DAY
              value: "{{ .Values.global.timespan.end.day }}"
            - name: END_HOUR
              value: "{{ .Values.global.timespan.end.hour }}"
          volumeMounts:
            - name: config-data
              mountPath: {{ .Values.persistence.config_data.path }}
            - name: init-data
              mountPath: {{ .Values.persistence.init_data.path }}
            - name: run-data
              mountPath: {{ .Values.persistence.run_data.path }}
      restartPolicy: OnFailure
{{ end }}