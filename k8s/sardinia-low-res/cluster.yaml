
wrfInitializerImage:
  repository: kikkomep/kube-openmpi
  tag: wrf_initializer
  pullPolicy: Always

wrfPopulateImage:
  repository: kikkomep/kube-openmpi
  tag: wrf_populate
  pullPolicy: Always

wrfWpsImage:
  repository: kikkomep/kube-openmpi
  tag: wrf_wps
  pullPolicy: Always

wrfWrfImage:
  repository: kikkomep/kube-openmpi
  tag: wrf_wrf
  pullPolicy: Always

tdmToolImage:
  repository: kikkomep/tdm-tools
  tag: latest
  pullPolicy: Always

wrfDataInitImage:
  repository: kikkomep/kube-openmpi
  tag: wrf_4.0.3-1.10.7-centos7-0.7.0
  pullPolicy: Always

mpiImage:
  repository: kikkomep/kube-openmpi
  tag: wrf_4.0.3-1.10.7-centos7-0.7.0
  pullPolicy: Always
  # pullSecrets:
  # - name: ""

mpiDataWriterImage:
  repository: kikkomep/kube-openmpi
  tag: wrf_writer_3.2.0-ubuntu-1.6.0-0.4.3
  pullPolicy: Always

networkPolicy:
  enabled: false

sshGateway:
  enabled: false
  nodePort: 30220

# kube-openmpi cluster consists of 1-Master and N-Workers.
# master is the place you will invoke mpirun/mpiexec.
# 'hostfile' will be automatically generated/updated
# and is available at '/kube-openmpi/generated/hostfile'.
mpiMaster:
  debug_shell: true

  autoUpdateHostfile:
    enabled: true
    # securityContext:
    #   runAsUser: 1000
    #   fsGroup: 1000
  oneShot:
  # If oneShot.enabled=true, mater automatically runs oneShot.command and complete self.
    enabled: false
  # # This will scale workers down to 0 when command completed successfully.
    autoScaleDownWorkers: false
    # command: |
    #   mpiexec --allow-run-as-root \
    #     --hostfile /kube-openmpi/generated/hostfile \
    #     --display-map -n 4 -npernode 1 \
    #     sh -c 'echo $(hostname):hello'
  resources:
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # volumes:
  # - name: cache-volume
  #   emptyDir: {}
  # volumeMounts:
  # - mountPath: /cache
  #   name: cache-volume

mpiWorkers:
  debug_shell: true

  num: 1
  # securityContext:
  #   runAsUser: 1000
  #   fsGroup: 1000
  # customScheduling:
  #   enabled: true
  #   schedulerName: kube-batchd
  #   podDisruptionBudget:
  #     enabled: true
  resources:
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  #  gpu: 1
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
  #  gpu: 1
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # volumes:
  # - name: cache-volume
  #   emptyDir: {}
  # volumeMounts:
  # - mountPath: /cache
  #   name: cache-volume

appCodesToSync:
# - name: chainermn
#   gitRepo: https://github.com/chainer/chainermn.git
#   gitBranch: master
#   fetchWaitSecond: "120"
#   mountPath: /chainermn-examples
#   subPath: chainermn/examples
# - name: chainer
#   gitRepo: https://github.com/chainer/chainer.git
#   gitBranch: master
#   fetchWaitSecond: "120"
#   mountPath: /chainer-examples
#   subPath: chainer/examples
# - name: your-secret-repo
#   gitRepo: git@github.com:your-org/your-secret-repo.git
#   gitBranch: master
#   fetchWaitSecond: "120"
#   mountPath: /your-secret-repo
#   gitSecretName: git-sync-creds
